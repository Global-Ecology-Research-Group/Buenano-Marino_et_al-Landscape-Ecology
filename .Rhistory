# Read in the files
list.buildings <- list.files("Shapefiles/building_height_shapefiles", pattern=".geojson", full.names = TRUE)
setwd("~/GitHub_GERG/Buenano-Marino_et_al-Landscape-Ecology")
# Read in the files
list.buildings <- list.files("Shapefiles/building_height_shapefiles", pattern=".geojson", full.names = TRUE)
list.buildings
# reading in city data
urban_areas_E <- st_read("Shapefiles/urban_areas/Urban_areas.shp")
library(sf)
library(dplyr)
library(sf)
library(ggplot2)
library(readr)
# reading in city data
urban_areas_E <- st_read("Shapefiles/urban_areas/Urban_areas.shp")
urban_areas_W <- st_read("Shapefiles/urban_areas/Urban_areas_W.shp")
urban_areas <- rbind(urban_areas_E, urban_areas_W)
library(dplyr)
library(readr)
library(tidyverse)
# Load necessary libraries
library(sf)
library(dplyr)
library(stringr)
# Set the path to the folder containing RDS files
rds_folder_path <- "building_height_bird_diversity/Intermediate data/compiled_data"
# Get list of RDS files
rds_files <- list.files(path = rds_folder_path, pattern = "\\.RDS$", full.names = TRUE)
# Extract city names from file names
city_names <- basename(rds_files) %>%
str_remove("\\.RDS$")
# Read the shapefile
shapefile_path <- "Shapefiles/urban_areas/Urban_areas.shp"
urban_areas <- st_read(shapefile_path)
# Filter the shapefile to include only matching cities
filtered_urban_areas <- urban_areas %>%
filter(NAME20 %in% city_names)
# Save the new filtered shapefile
output_path <- "Shapefile/urban_areas/Filtered_Urban_areas.shp"
st_write(filtered_urban_areas, output_path)
# Save the new filtered shapefile
output_path <- "Shapefile/urban_areas/Filtered_Urban_areas.shp"
st_write(filtered_urban_areas, output_path)
# Save the new filtered shapefile
output_path <- "Shapefile\urban_areas\Filtered_Urban_areas.shp"
st_write(filtered_urban_areas, output_path)
# Save the new filtered shapefile
output_path <- "Shapefile/urban_areas/Filtered_Urban_areas.shp"
st_write(filtered_urban_areas, output_path)
# Save the new filtered shapefile
output_path <-
st_write(filtered_urban_areas, "Shapefile/urban_areas/Filtered_Urban_areas.shp")
# Save the new filtered shapefile
st_write(filtered_urban_areas, "Shapefile/urban_areas/Filtered_Urban_areas.shp")
# Save the new filtered shapefile
st_write(filtered_urban_areas, "Shapefiles/urban_areas/Filtered_Urban_areas.shp")
# Set the path to the folder containing RDS files
rds_folder_path <- "building_height_bird_diversity/Intermediate data/compiled_data"
# Get list of RDS files
rds_files <- list.files(path = rds_folder_path, pattern = "\\.RDS$", full.names = TRUE)
# Extract city names from file names
city_names <- basename(rds_files) %>%
str_remove("\\.RDS$")
# Read the shapefile
shapefile_path <- "Shapefiles/urban_areas/Urban_areas.shp"
urban_areas <- st_read(shapefile_path)
# Filter the shapefile to include only matching cities
filtered_urban_areas <- urban_areas %>%
filter(NAME20 %in% city_names)
filtered_urban_areas
urban_areas
city_names
rds_files
rds_folder_path
# Set the path to the folder containing RDS files
rds_folder_path <- "building_height_bird_diversity/Intermediate_data/compiled_data"
# Get list of RDS files
rds_files <- list.files(path = rds_folder_path, pattern = "\\.RDS$", full.names = TRUE)
# Extract city names from file names
city_names <- basename(rds_files) %>%
str_remove("\\.RDS$")
city_names
# Set the path to the folder containing RDS files
rds_folder_path <- "Intermediate_data/compiled_data"
# Get list of RDS files
rds_files <- list.files(path = rds_folder_path, pattern = "\\.RDS$", full.names = TRUE)
# Extract city names from file names
city_names <- basename(rds_files) %>%
str_remove("\\.RDS$")
city_names
urban_areas <- st_read(shapefile_path)
# Filter the shapefile to include only matching cities
filtered_urban_areas <- urban_areas %>%
filter(NAME20 %in% city_names)
# Save the new filtered shapefile
st_write(filtered_urban_areas, "Shapefiles/urban_areas/Filtered_Urban_areas.shp")
# Save the new filtered shapefile
st_write(filtered_urban_areas, "Shapefiles/urban_areas/Filtered_Urban_areas.shp")
print(paste("New shapefile created at:", output_path))
library(dplyr)
library(ggplot2)
library(sf)
library(tidyr)
# get list of all cities
folder_path <- "Intermediate data/compiled_data"
city_files <- list.files(folder_path, pattern = "\\.RDS$", full.names = TRUE)
# Read all files, add the "name" column, and bind them together
all_city_data <- city_files %>%
lapply(function(file) {
data <- readRDS(file)
data$name <- gsub("\\.RDS$", "", basename(file))  # Remove ".RDS" from file name
return(data)
}) %>%
bind_rows()  # Combine all data frames into one
# join with data frame containing information on ecoregion
er_data <- readRDS("Intermediate data/ecoregion_ebird_ndvi.RDS")
# join with data frame containing information on ecoregion
er_data <- readRDS("Intermediate data/ecoregion_ebird_ndvi/ecoregion_ebird_ndvi.RDS")
# get list of all cities
folder_path <- "Intermediate_data/compiled_data"
city_files <- list.files(folder_path, pattern = "\\.RDS$", full.names = TRUE)
# Read all files, add the "name" column, and bind them together
all_city_data <- city_files %>%
lapply(function(file) {
data <- readRDS(file)
data$name <- gsub("\\.RDS$", "", basename(file))  # Remove ".RDS" from file name
return(data)
}) %>%
bind_rows()  # Combine all data frames into one
# join with data frame containing information on ecoregion
er_data <- readRDS("Intermediate_data/ecoregion_ebird_ndvi/ecoregion_ebird_ndvi.RDS")
# join with data frame containing information on ecoregion
er_data <- readRDS("Intermediate_data/ecoregion_ebird/ecoregion_ebird_ndvi.RDS")
er_data <- er_data %>%
st_drop_geometry() %>%
dplyr::select(LOCALIT, eco_name, mean) %>%
rename(NDVI=mean)
all_city_data <- left_join(all_city_data, er_data, by=c("LOCALITY_ID" = "LOCALIT"))
# 1. Sample and select relevant columns (you already did this)
plot_data <- all_city_data %>%
slice_sample(n = 1000) %>%
select(total_richness, bare, built, grass,
shrub_and_scrub, trees, water, NDVI, mean_h) %>%
rename(Bare = bare, Impervious = built,
Grass = grass, "Shrub and Scrub" = shrub_and_scrub,
Trees = trees, Water = water, "Building Height" = mean_h)
# 2. Reshape the data to long format
plot_data_long <- plot_data %>%
pivot_longer(-total_richness, names_to = "predictor", values_to = "value")
# 3. Plot using facet_wrap
ggplot(plot_data_long, aes(x = value, y = total_richness)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "red") +
facet_wrap(~ predictor, scales = "free_x") +
labs(x = "Predictor Value", y = "Species Richness") +
theme_bw()
# get list of all cities
folder_path <- "Intermediate_data/compiled_data"
# join with data frame containing information on ecoregion
er_data <- readRDS("Intermediate_data/ecoregion_ebird/ecoregion_ebird_ndvi.RDS")
# Read and analyze all cities
folder_path <- "Intermediate_data/compiled_data"
city_files <- list.files(folder_path, pattern = "\\.RDS$", full.names = TRUE)
city_files
# add NDVI and ecoregion data to all_city_data
er_data <- readRDS("Intermediate_data/ecoregion_ebird/ecoregion_ebird_ndvi.RDS")
# get list of all cities
folder_path <- "Intermediate_data/compiled_data"
city_files <- list.files(folder_path, pattern = "\\.RDS$", full.names = TRUE)
city_files
# check variance of building height data overall
geojson_files <- list.files(path = "Intermediate_data/city_level_geojson_building_data/",
pattern = "\\.geojson$",
full.names = TRUE)
geojson_files
results <- readRDS("Intermediate_data/model_results/Obj2_Models.RDS")
# read in the data
building_height <- read_csv("Intermediate_data/building_height/summary_building_height_city_updated.csv")
# filter the data so we are only look at cities with 80% building height data
building_height_filtered <- building_height %>%
filter(percent_buildings_with_height >= 0.7)
# check the distribution of the data
hist(building_height_filtered$quantile_0.99)
hist(building_height_filtered$total_buildings)
# plot the relationship between the 99% quantile and number of buildings
ggplot(building_height_filtered, aes(x = total_buildings, y = quantile_0.99)) +
geom_point(alpha = 0.7, color = "#1f78b4") +
geom_smooth(method = "lm", se = TRUE, color = "gray30", linetype = "dashed") +
scale_x_log10() +  # Log-transform the x-axis
theme_classic() +
labs(
x = "Total Number of Buildings (log scale)",
y = "99th Percentile of Building Height"
) +
theme(
plot.title = element_text(face = "bold", size = 14),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
ggplot(building_height_filtered, aes(x = total_buildings, y = max_height)) +
geom_point(alpha = 0.7, color = "#1f78b4") +
geom_smooth(method = "lm", se = TRUE, color = "gray30", linetype = "dashed") +
scale_x_log10() +  # Log-transform the x-axis
theme_classic() +
labs(
x = "Total Number of Buildings (log scale)",
y = "99th Percentile of Building Height"
) +
theme(
plot.title = element_text(face = "bold", size = 14),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
# get list of all cities
folder_path <- "Intermediate_data/compiled_data"
city_files <- list.files(folder_path, pattern = "\\.RDS$", full.names = TRUE)
city_files
# join with data frame containing information on ecoregion
er_data <- readRDS("Intermediate_data/ecoregion_ebird/ecoregion_ebird_ndvi.RDS")
er_data
# Read and analyze all cities
folder_path <- "Intermediate_data/compiled_data"
city_files <- list.files(folder_path, pattern = "\\.RDS$", full.names = TRUE)
city_files
# Load required libraries
library(mgcv)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(stringr)
library(car)
library(ggpubr)
library(tibble)
library(MuMIn)
library(FSA)
library(sf)
# get list of all cities
folder_path <- "Intermediate_data/compiled_data"
city_files <- list.files(folder_path, pattern = "\\.RDS$", full.names = TRUE)
# Read all files, add the "name" column, and bind them together
all_city_data <- city_files %>%
lapply(function(file) {
data <- readRDS(file)
data$name <- gsub("\\.RDS$", "", basename(file))  # Remove ".RDS" from file name
return(data)
}) %>%
bind_rows()  # Combine all data frames into one
# join with data frame containing information on ecoregion
er_data <- readRDS("Intermediate_data/ecoregion_ebird/ecoregion_ebird_ndvi.RDS")
er_data <- er_data %>%
st_drop_geometry() %>%
select(LOCALIT, eco_name, mean) %>%
rename(NDVI=mean)
all_city_data <- left_join(all_city_data, er_data, by=c("LOCALITY_ID" = "LOCALIT"))
# now get a table with just name and eco_name
name_eco <- all_city_data %>%
group_by(name) %>%
summarise(eco_name=first(eco_name))
# histogram of species richness across all cities
hist(all_city_data$total_richness)
# check for multicolinearity
city_rel <- all_city_data %>%
filter(complete.cases(mean_h),
complete.cases(NDVI),
complete.cases(sd_h)) %>%
select(total_richness, duration, mean_h, built, NDVI, sd_h, LAT, LONG, name)
cor(city_rel[,3:6], method="pearson")
cor.test(city_rel$mean_h, city_rel$built, method = "pearson")
# Set k_val for smooth terms
k_val_dur <- 15
k_val_geo <- 30
# Function to read and analyze a city
analyze_city <- function(file_path) {
tryCatch({
# Read city data
city_data <- readRDS(file_path)
city_name <- tools::file_path_sans_ext(basename(file_path))
city_data <- city_data %>%
filter(complete.cases(mean_h))
city_data <- left_join(city_data, er_data, by=c("LOCALITY_ID" = "LOCALIT"))
# Models for species richness
# Model 1: only 'built'
model1_richness <- gam(total_richness ~ built +
s(duration, k=k_val_dur, bs="cr") +
s(LAT, LONG,  k=k_val_geo, bs="tp"),
family = Gamma(link = "log"),
data = city_data, method = "REML")
# Model 2: 'built' and 'mean_h'
model2_richness <- gam(total_richness ~ built + mean_h + sd_h +
s(duration,  k=k_val_dur, bs="cr") +
s(LAT, LONG,  k=k_val_geo, bs="tp"),
family = Gamma(link = "log"),
data = city_data, method = "REML")
# Model 3: only 'mean_h'
model3_richness <- gam(total_richness ~ mean_h + sd_h +
s(duration,  k=k_val_dur, bs="cr") +
s(LAT, LONG,  k=k_val_geo, bs="tp"),
family = Gamma(link = "log"),
data = city_data, method = "REML")
# Model 4: only NDVI
model4_richness <- gam(total_richness ~ NDVI +
s(duration,  k=k_val_dur, bs="cr") +
s(LAT, LONG,  k=k_val_geo, bs="tp"),
family = Gamma(link = "log"),
data = city_data, method = "REML")
# Model 5: NDVI and building height
model5_richness <- gam(total_richness ~ NDVI + mean_h + sd_h +
s(duration,  k=k_val_dur, bs="cr") +
s(LAT, LONG,  k=k_val_geo, bs="tp"),
family = Gamma(link = "log"),
data = city_data, method = "REML")
# Model 6: NDVI and built
model6_richness <- gam(total_richness ~ NDVI + built +
s(duration,  k=k_val_dur, bs="cr") +
s(LAT, LONG,  k=k_val_geo, bs="tp"),
family = Gamma(link = "log"),
data = city_data, method = "REML")
# Model 7: NDVI, built, and building height
model7_richness <- gam(total_richness ~ NDVI + built + mean_h + sd_h +
s(duration,  k=k_val_dur, bs="cr") +
s(LAT, LONG,  k=k_val_geo, bs="tp"),
family = Gamma(link = "log"),
data = city_data, method = "REML")
# Extract relevant information for built and mean_h
extract_info <- function(model) {
summary_model <- summary(model)
# Extract estimates and p-values for built and mean_h
estimates <- summary_model$p.table[ , "Estimate"]
std_errors <- summary_model$p.table[ , "Std. Error"]
p_values <- summary_model$p.table[ , "Pr(>|t|)"]
list(
aic = AIC(model),
r2 = summary_model$r.sq,
dev_expl = summary_model$dev.expl,
estimates = estimates,
std_errors = std_errors,
p_values = p_values
)
}
# Extract information from models
info_model1 <- extract_info(model1_richness)
info_model2 <- extract_info(model2_richness)
info_model3 <- extract_info(model3_richness)
info_model4 <- extract_info(model4_richness)
info_model5 <- extract_info(model5_richness)
info_model6 <- extract_info(model6_richness)
info_model7 <- extract_info(model7_richness)
# Create a data frame with results
results <- data.frame(
city = city_name,
model = c("Model1", "Model2", "Model3", "Model4", "Model5", "Model6", "Model7"),
aic = c(info_model1$aic, info_model2$aic, info_model3$aic, info_model4$aic, info_model5$aic, info_model6$aic, info_model7$aic),
r2 = c(info_model1$r2, info_model2$r2, info_model3$r2, info_model4$r2, info_model5$r2, info_model6$r2, info_model7$r2),
dev_expl = c(info_model1$dev_expl, info_model2$dev_expl, info_model3$dev_expl, info_model4$dev_expl, info_model5$dev_expl, info_model6$dev_expl, info_model7$dev_expl),
built_estimate = c(info_model1$estimates["built"], info_model2$estimates["built"], NA, NA, NA, info_model6$estimates["built"], info_model7$estimates["built"]),
built_std_error = c(info_model1$std_errors["built"], info_model2$std_errors["built"], NA, NA, NA, info_model6$std_errors["built"], info_model7$std_errors["built"]),
built_p_value = c(info_model1$p_values["built"], info_model2$p_values["built"], NA, NA, NA, info_model6$p_values["built"], info_model7$p_values["built"]),
mean_h_estimate = c(NA, info_model2$estimates["mean_h"], info_model3$estimates["mean_h"], NA, info_model5$estimates["mean_h"], NA, info_model7$estimates["mean_h"]),
mean_h_std_error = c(NA, info_model2$std_errors["mean_h"], info_model3$std_errors["mean_h"], NA, info_model5$std_errors["mean_h"], NA, info_model7$std_errors["mean_h"]),
mean_h_p_value = c(NA, info_model2$p_values["mean_h"], info_model3$p_values["mean_h"], NA, info_model5$p_values["mean_h"], NA, info_model7$p_values["mean_h"]),
ndvi_estimate = c(NA, NA, NA, info_model4$estimates["NDVI"], info_model5$estimates["NDVI"], info_model6$estimates["NDVI"], info_model7$estimates["NDVI"]),
ndvi_std_error = c(NA, NA, NA, info_model4$std_errors["NDVI"], info_model5$std_errors["NDVI"], info_model6$std_errors["NDVI"], info_model7$std_errors["NDVI"]),
ndvi_p_value = c(NA, NA, NA, info_model4$p_values["NDVI"], info_model5$p_values["NDVI"], info_model6$p_values["NDVI"], info_model7$p_values["NDVI"])
)
return(results)
}, error = function(e) {
message(sprintf("Error processing city: %s\nError: %s", file_path, e$message))
return(NULL)  # Return NULL if an error occurs
})
}
# Read and analyze all cities
folder_path <- "Intermediate_data/compiled_data"
city_files <- list.files(folder_path, pattern = "\\.RDS$", full.names = TRUE)
results_list <- lapply(seq_along(city_files), function(i) {
city <- city_files[[i]]
message("Processing city ", i, " of ", length(city_files), ": ", city)
analyze_city(city)
})
test <- readRDS("Intermediate_data/compiled_data/Anacortes, WA.RDS")
View(test)
test <- readRDS("Intermediate_data/ecoregion_ebird/ecoregion_ebird_ndvi.RDS")
test <- readRDS("Intermediate_data/land_cover_GEE/gee_land_cover_combined.RDS")
